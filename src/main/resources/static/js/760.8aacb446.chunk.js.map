{"version":3,"file":"static/js/760.8aacb446.chunk.js","mappings":"kRAgBaA,GAAwBC,EAAAA,EAAAA,eAAuB,CAAC,GAEtD,SAASC,EAAsBC,EAAcC,GAClD,GACO,oBADCA,EAAOC,KAEX,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAYH,GAAK,IAAEI,iBAAkBH,EAAOI,UAE5C,MAAM,IAAIC,KAEhB,C,aChBMC,EAAwB,CAC5B,CAAEC,MAAO,eAAgBC,WAAY,2BAAQC,MAAO,KACpD,CAAEF,MAAO,OAAQC,WAAY,2BAAQC,MAAO,KAC5C,CAAEF,MAAO,gBAAiBC,WAAY,qBAAOC,MAAO,KACpD,CAAEF,MAAO,OAAQC,WAAY,eAAMC,MAAO,KAC1C,CAAEF,MAAO,QAASC,WAAY,eAAMC,MAAO,KAC3C,CAAEF,MAAO,SAAUC,WAAY,eAAMC,MAAO,MAG/B,SAASC,IACtB,IAAAC,EAA4BC,EAAAA,WAAiBhB,GAArCG,EAAKY,EAALZ,MAAOc,EAAQF,EAARE,SAEfC,EAAgDF,EAAAA,SAAyB,IAAGG,GAAAC,EAAAA,EAAAA,GAAAF,EAAA,GAArEG,EAAgBF,EAAA,GAAEG,EAAmBH,EAAA,GAC5CI,EAAgDP,EAAAA,WAAwBQ,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjEhB,EAAgBiB,EAAA,GAAEC,EAAmBD,EAAA,GAE5CR,EAAAA,WAAgB,YACdU,EAAAA,EAAAA,KAAiBC,MAAK,SAACC,GACrB,IAAMC,EAAgB,OAAVD,QAAU,IAAVA,OAAU,EAAVA,EAAYE,KAAI,SAAUC,GACpC,OAAOA,EAAUC,IACnB,IACAH,GAAOP,EAAoBO,EAC7B,GACF,GAAG,IAEH,IAAAI,GAA4BC,EAAAA,EAAAA,GAAS,CACnCC,SAAU,CAAC,cAAe5B,GAC1B6B,QAAS,kBACPC,MACEC,EAAAA,EAAW,uCAAyC/B,GACpDoB,MAAK,SAACY,GAAG,OAAKA,EAAIC,MAAM,GAAC,EAC7BC,UAAWlC,IANLmC,EAAST,EAATS,UAAWC,EAAIV,EAAJU,KASLZ,GAAcG,EAAAA,EAAAA,GAAS,CACnCC,SAAU,CAAC,gBAAiB5B,GAC5B6B,QAAS,kBACPC,MACEC,EAAAA,EAAW,wCAA0C/B,GACrDoB,MAAK,SAACY,GAAG,OAAKA,EAAIC,MAAM,GAAC,EAC7BC,UAAWlC,IANLoC,KAcR,OALA3B,EAAAA,SAAc,WACZC,GACEA,EAAS,CAAEZ,KAAM,kBAAmBG,QAASD,GACjD,GAAG,CAACA,IAEAmC,GAAenC,GACVqC,EAAAA,EAAAA,KAAA,KAAAC,SAAG,gBAIVC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,GAAI,CAAEC,EAAG,GAAIN,SAAA,EACvCD,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAGR,UAChBD,EAAAA,EAAAA,KAACU,EAAAA,EAAY,CACXC,YAAY,uCACZC,QAASnC,EACToC,SAAUhC,EACViC,MAAY,OAALvD,QAAK,IAALA,OAAK,EAALA,EAAOI,sBAGlBuC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAER,SAAA,CAAC,4BACVF,GAAQA,EAAKgB,SAErBb,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAER,SAAA,CAAC,wCACRF,GAAQA,EAAKiB,wBAEvBd,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAER,SAAA,CAAC,sBACXF,GAAQA,EAAKkB,qBAEpBf,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAER,SAAA,CAAC,sBACXF,GAAQA,EAAKmB,iBAEpBlB,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIH,GAAI,CAAEa,OAAQ,KAAMlB,UACrCD,EAAAA,EAAAA,KAACoB,EAAAA,EAAQ,CACPtD,QAASA,EACTuD,KAAMlC,GAAeA,EAAUmC,UAAYnC,EAAUmC,UAAY,SAK3E,C,6FC/Ee,SAASC,EAAaC,GACnC,IAAQC,EAAyBD,EAAzBC,aAAcC,EAAWF,EAAXE,OACtB,OAAQD,GACN,IAAK,UACH,OACEzB,EAAAA,EAAAA,KAAC2B,EAAAA,EAAM,CAACC,QAAQ,YAAYC,MAAM,UAAS5B,SAAC,iBAIhD,IAAK,QACH,OACED,EAAAA,EAAAA,KAAC2B,EAAAA,EAAM,CAACC,QAAQ,WAAWC,MAAM,QAAO5B,SAAC,iBAI7C,IAAK,UACH,OACED,EAAAA,EAAAA,KAAC8B,EAAAA,EAAa,CACZC,SAAO,EACPC,gBAAgB,QAChBC,WAAWjC,EAAAA,EAAAA,KAACkC,EAAAA,EAAQ,IACpBN,QAAQ,WAAU3B,SACnB,uBAIL,IAAK,QACH,OACED,EAAAA,EAAAA,KAAC2B,EAAAA,EAAM,CAACC,QAAQ,YAAYC,MAAM,UAAUM,QAAST,EAAOzB,SAAC,iBAKjE,QACE,OACED,EAAAA,EAAAA,KAAC2B,EAAAA,EAAM,CAACC,QAAQ,YAAYC,MAAM,UAAUO,UAAQ,EAAAnC,SAAC,iBAK7D,C,oFC3BMnC,EAAwB,CAC5B,CAAEC,MAAO,YAAaC,WAAY,eAAMC,MAAO,IAC/C,CAAEF,MAAO,eAAgBC,WAAY,2BAAQC,MAAO,KACpD,CAAEF,MAAO,eAAgBC,WAAY,2BAAQC,MAAO,KACpD,CAAEF,MAAO,QAASC,WAAY,2BAAQC,MAAO,IAAKR,KAAM,UACxD,CAAEM,MAAO,QAASC,WAAY,2BAAQC,MAAO,IAAKR,KAAM,WAG3C,SAAS4E,EAAeb,GACrC,IAAQc,EAA4Bd,EAA5Bc,KAAMvC,EAAsByB,EAAtBzB,KAAMwC,EAAgBf,EAAhBe,YAEZhF,EAAUa,EAAAA,WAAiBhB,GAA3BG,MAERe,EAAkCF,EAAAA,SAA6B,MAAKG,GAAAC,EAAAA,EAAAA,GAAAF,EAAA,GAA7DkE,EAASjE,EAAA,GAAEkE,EAAYlE,EAAA,GAE9BI,EAA8BP,EAAAA,SAA6B,MAAKQ,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAzD+D,EAAO9D,EAAA,GAAE+D,EAAU/D,EAAA,GAEpBgE,GAAWC,EAAAA,EAAAA,GAAY,CAC3BC,WAAY,WACV,OAAOrD,MAAMC,EAAAA,EAAW,iBAAkB,CACxCqD,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACnBC,OAAQrD,EACRZ,UAAgB,OAAL5B,QAAK,IAALA,OAAK,EAALA,EAAOI,iBAClB6E,UAAWA,EACXE,QAASA,MAEV3D,MAAK,SAACY,GAAG,OAAKA,EAAIC,MAAM,GAC7B,IAGF,OACEI,EAAAA,EAAAA,KAACqD,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAatD,UAC9CC,EAAAA,EAAAA,MAACsD,EAAAA,EAAM,CAAClB,KAAMA,EAAMmB,QAASlB,EAAYtC,SAAA,EACvCD,EAAAA,EAAAA,KAAC0D,EAAAA,EAAW,CAAAzD,UACVD,EAAAA,EAAAA,KAAC2D,EAAAA,EAAK,CAACC,UAAW,MAAOvD,QAAS,EAAEJ,UAClCC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAEJ,SAAA,EACzBD,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAER,UACfD,EAAAA,EAAAA,KAAC6D,EAAAA,EAAU,CAAA5D,SAAC,oBAEdD,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAER,UACfD,EAAAA,EAAAA,KAAC8D,EAAAA,EAAc,CACbC,MAAM,2BACNjD,MAAO0B,EACPwB,SAAU,SAACC,GAAQ,OAAKxB,EAAawB,EAAS,EAC9CC,aAAW,OAGflE,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAER,UACfD,EAAAA,EAAAA,KAAC8D,EAAAA,EAAc,CACbC,MAAM,2BACNjD,MAAO4B,EACPsB,SAAU,SAACC,GAAQ,OAAKtB,EAAWsB,EAAS,EAC5CC,aAAW,OAGflE,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAER,UACfD,EAAAA,EAAAA,KAAC2B,EAAAA,EAAM,CACLwC,WAAS,EACTvC,QAAQ,YACRO,QAAS,WACPS,EAASwB,QACX,EAAEnE,SACH,2BAOTD,EAAAA,EAAAA,KAACqE,EAAAA,EAAa,CAAApE,UACZD,EAAAA,EAAAA,KAACoB,EAAAA,EAAQ,CAACtD,QAASA,EAASuD,KAAMtB,UAK5C,CC1FoC,SAAAuE,IAenC,OAfmCA,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAApC,SAAAC,EAAqCC,GAAU,IAAA5E,EAAA6E,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAR,EAAAA,EAAAA,KAAAS,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAC1BT,EAAKU,cAAc,KAAD,EAES,GAFxCtF,EAAImF,EAAAI,KACJV,EAAWW,EAAAA,GAAUxF,KACrB8E,EAAiBD,EAASY,WAAW,IACtB,CAADN,EAAAE,KAAA,SACgC,KAA5CN,EAAYF,EAASa,OAAOZ,IAClB,CAADK,EAAAE,KAAA,SAEb,IADML,EAAmBQ,EAAAA,GAAWG,cAAcZ,GACzCE,EAAI,EAAGA,EAAID,EAAUY,OAAQX,IACpCD,EAAUC,GAAGY,GAAKZ,EAAI,EACvB,OAAAE,EAAAW,OAAA,SACMd,GAAS,eAAAG,EAAAW,OAAA,SAGb,IAAE,yBAAAX,EAAAY,OAAA,GAAApB,EAAA,MACVqB,MAAA,KAAAC,UAAA,CAED,IAAMlI,EAAwB,CAC5B,CAAEC,MAAO,OAAQC,WAAY,2BAAQC,MAAO,KAC5C,CAAEF,MAAO,OAAQC,WAAY,2BAAQC,MAAO,MAG/B,SAASgI,IACtB,IAAAC,GAAuDC,EAAAA,EAAAA,MAA/CC,EAAaF,EAAbE,cAAeC,EAAYH,EAAZG,aAAcC,EAAaJ,EAAbI,cAE7B/I,EAAUa,EAAAA,WAAiBhB,GAA3BG,MAERe,EAA4BF,EAAAA,SAAe,IAAGG,GAAAC,EAAAA,EAAAA,GAAAF,EAAA,GAAvC8E,EAAM7E,EAAA,GAAEgI,EAAShI,EAAA,GAElBiI,EAAQpI,EAAAA,SAAc,WAC1B,IAAMqI,EAAmB,GAQzB,OAPAL,EAAcM,SAAQ,SAAC/B,GACrB8B,EAAIE,MACFzG,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CACG0E,EAAKvF,KAAK,MAAIuF,EAAKiC,KAAK,WADlBjC,EAAKvF,MAIlB,IACOqH,CACT,GAAG,CAACL,IAEJzH,EAAwBP,EAAAA,SAA6B,IAAGQ,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjDoB,EAAInB,EAAA,GAAEiI,EAAOjI,EAAA,GAEpBR,EAAAA,WAAgB,WACd,GAAMgI,EAAc,GAAI,CACtBS,EAAQ,IACR,IAAM9G,EAhDkC,SAEV+G,GAAA,OAAAxC,EAAAyB,MAAC,KAADC,UAAA,CA8CjBe,CAAsBX,EAAc,IACjDrG,EAAKhB,MAAK,SAACiI,GACTC,QAAQC,IAAIF,GACZH,EAAQG,EACV,GACF,CACF,GAAG,CAACZ,EAAc,KAElB,IAAAe,EAAwC/I,EAAAA,SAA6B,IAAGgJ,GAAA5I,EAAAA,EAAAA,GAAA2I,EAAA,GAAjE1F,EAAY2F,EAAA,GAAEC,EAAeD,EAAA,GAE9BxE,GAAWC,EAAAA,EAAAA,GAAY,CAC3BC,WAAY,WACV,OAAOrD,MAAMC,EAAAA,EAAW,WAAY,CAClCqD,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACnB7B,UAAWvB,EACXZ,UAAgB,OAAL5B,QAAK,IAALA,OAAK,EAALA,EAAOI,qBAGnBoB,MAAK,SAACY,GAAG,OAAKA,EAAIC,MAAM,IACxBb,MAAK,SAACgB,GACL,IAAK,IAAIiF,EAAI,EAAGA,EAAIjF,EAAK4F,OAAQX,IAC/BjF,EAAKiF,GAAGY,GAAKZ,EAAI,EAEnBuB,EAAUxG,EACZ,GACJ,IAaF,OANA3B,EAAAA,SAAc,WACR2B,EAAK4F,OAAS,GAChB0B,EAAgB,QAEpB,GAAG,CAACtH,KAGFG,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,GAAI,CAAEC,EAAG,GAAIN,SAAA,EACvCD,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAER,UACfD,EAAAA,EAAAA,KAAA,OAAAtC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAS2I,EAAa,CAAEiB,UAAW,cAAa,IAAArH,UAC9CC,EAAAA,EAAAA,MAACqH,EAAAA,EAAK,CAAAtH,SAAA,EACJD,EAAAA,EAAAA,KAAA,SAAAtC,EAAAA,EAAAA,GAAA,GAAW4I,OACXtG,EAAAA,EAAAA,KAAC6D,EAAAA,EAAU,CAAC2D,MAAM,SAAQvH,SAAC,kDAIjCD,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAER,UACfD,EAAAA,EAAAA,KAAA,SAAAC,UACED,EAAAA,EAAAA,KAAA,MAAAC,SAAKuG,SAGTxG,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAER,UACfD,EAAAA,EAAAA,KAACuB,EAAY,CACXE,aAAcA,EACdC,OAAQ,WACNkB,EAASwB,QACX,OAGJpE,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIH,GAAI,CAAEa,OAAQ,KAAMlB,UACrCD,EAAAA,EAAAA,KAACoB,EAAAA,EAAQ,CAACtD,QAASA,EAASuD,KAAMtB,OAEpCC,EAAAA,EAAAA,KAACqC,EAAc,CACbC,KAAMc,EAAOuC,OAAS,EACtB5F,KAAMqD,EACNb,YAvCc,WAClBgE,EAAU,GACZ,MAyCF,C,wBCxHMkB,GAAWC,EAAAA,EAAAA,IAAO,WAAPA,EAAmB,wCAE9B5J,EAAwB,CAC5B,CAAEC,MAAO,YAAaC,WAAY,eAAMC,MAAO,IAC/C,CAAEF,MAAO,eAAgBC,WAAY,2BAAQC,MAAO,KACpD,CAAEF,MAAO,eAAgBC,WAAY,2BAAQC,MAAO,KACpD,CACEF,MAAO,QACPC,WAAY,qBACZC,MAAO,IACPR,KAAM,SACNkK,WAAY,SAACC,GAAiC,OAC5C1H,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAEJ,SAAA,EACzBD,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAGR,UAChBD,EAAAA,EAAAA,KAACyH,EAAQ,CAAC3G,MAAO+G,OAAOD,EAAO9G,OAAQgH,IAAI,WAE7C9H,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAER,UACfD,EAAAA,EAAAA,KAAC6D,EAAAA,EAAU,CAAA5D,SAAE2H,EAAO9G,MAAQ,UAGzB,IAiBN,SAASiH,EACdvG,GAEA,OACEtB,EAAAA,EAAAA,MAACyD,EAAAA,EAAK,CAACC,UAAW,MAAOtD,GAAI,CAAEC,EAAG,GAAKF,QAAS,EAAEJ,SAAA,EAChDD,EAAAA,EAAAA,KAACgI,EAAAA,EAAqB,CACpB1H,GAAI,CAAEuB,MAAwB,cAAjBL,EAAMyG,OAAyB,UAAY,cAE1DjI,EAAAA,EAAAA,KAAC6D,EAAAA,EAAU,CAAA5D,SAAEuB,EAAMyG,WAGzB,CAEe,SAASC,EAAuB1G,GAC7C,IAAQ4B,EAAW5B,EAAX4B,OACR9E,EAA4BF,EAAAA,SAAuB,aAAYG,GAAAC,EAAAA,EAAAA,GAAAF,EAAA,GAAxD2J,EAAM1J,EAAA,GAAWA,EAAA,GACxB,OACEyB,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,GAAI,CAAEC,EAAG,GAAIN,UACvCD,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAGR,UAChBD,EAAAA,EAAAA,KAACoB,EAAAA,EAAQ,CACPtD,QAASA,EACTuD,KAAM+B,GAAkB,GACxB9C,GAAI,CAAE6H,UAAW,KACjBC,MAAO,CACLC,OAAQN,GAEVO,UAAW,CACTD,OAAQ,CAAEJ,OAAAA,SAMtB,CCpEA,IAAMM,EAAe,CACnB5K,iBAAkB,MAGL,SAAS6K,IACtB,IAAAC,GAA0BC,EAAAA,EAAAA,YAAWpL,EAAuBiL,GAAaI,GAAAnK,EAAAA,EAAAA,GAAAiK,EAAA,GAAlElL,EAAKoL,EAAA,GAAEtK,EAAQsK,EAAA,GAEtBtJ,GAA4BC,EAAAA,EAAAA,GAAS,CACnCC,SAAU,CAAC,aAAchC,EAAMI,kBAE/B6B,QAAS,kBACPC,MACEC,EAAAA,EAAW,mCAAqCnC,EAAMI,kBAErDoB,MAAK,SAACY,GAAG,OAAKA,EAAIC,MAAM,IACxBb,MAAK,SAACgB,GACL,IAAK,IAAIiF,EAAI,EAAGA,EAAIjF,EAAK4F,OAAQX,IAC/BjF,EAAKiF,GAAGY,GAAKZ,EAAI,EAEnB,OAAOjF,CACT,GAAE,EAEN6I,gBAAiB,MAfA7I,GAAFV,EAATS,UAAeT,EAAJU,MAkBnB,OACEC,EAAAA,EAAAA,KAAC5C,EAAsByL,SAAQ,CAAC/H,MAAO,CAAEvD,MAAAA,EAAOc,SAAAA,GAAW4B,UACzDC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAEJ,SAAA,EACzBD,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAER,UACfD,EAAAA,EAAAA,KAAC9B,EAAe,MAEjB6B,GAAwB,IAAhBA,EAAK4F,SACZ3F,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAER,UACfD,EAAAA,EAAAA,KAACiG,EAAkB,MAGtBlG,GAAQA,EAAK4F,OAAS,IACrB3F,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAER,UACfD,EAAAA,EAAAA,KAACkI,EAAsB,CAAC9E,OAAQrD,UAM5C,C","sources":["context/OrderPlacementContext.ts","component/HoldingsSection.tsx","component/StatusButton.tsx","component/PreorderDialog.tsx","component/UploadOrderSection.tsx","component/OrderProcessingSection.tsx","pages/OrderPlacementPage.tsx"],"sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport type Action = {\r\n  type: string;\r\n  payload?: any;\r\n};\r\n\r\nexport type Context = {\r\n  state?: any;\r\n  dispatch?: React.Dispatch<Action>;\r\n};\r\n\r\ntype State = {\r\n  currentPortfolio: string;\r\n};\r\n\r\nexport const OrderPlacementContext = createContext<Context>({});\r\n\r\nexport function orderPlacementReducer(state: State, action: Action) {\r\n  switch (action.type) {\r\n    case \"selectPortfolio\":\r\n      return { ...state, currentPortfolio: action.payload };\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n","import { Grid } from \"@mui/material\";\r\nimport { DataGrid, GridColDef } from \"@mui/x-data-grid\";\r\nimport SingleSelect from \"./SingleSelect\";\r\nimport React from \"react\";\r\nimport { listPortfolios } from \"../api/ListPortfolios\";\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport { BASE_URL } from \"../constant/Constant\";\r\nimport { OrderPlacementContext } from \"../context/OrderPlacementContext\";\r\n\r\nconst columns: GridColDef[] = [\r\n  { field: \"securityCode\", headerName: \"证券代码\", width: 100 },\r\n  { field: \"name\", headerName: \"证券名称\", width: 100 },\r\n  { field: \"securityShare\", headerName: \"持股数\", width: 100 },\r\n  { field: \"cost\", headerName: \"成本\", width: 100 },\r\n  { field: \"value\", headerName: \"市值\", width: 100 },\r\n  { field: \"profit\", headerName: \"盈亏\", width: 100 },\r\n];\r\n\r\nexport default function HoldingsSection() {\r\n  const { state, dispatch } = React.useContext(OrderPlacementContext);\r\n\r\n  const [portfolioOptions, setPortfolioOptions] = React.useState<string[]>([]);\r\n  const [currentPortfolio, setCurrentPortfolio] = React.useState<string>();\r\n\r\n  React.useEffect(() => {\r\n    listPortfolios().then((portfolios) => {\r\n      const tmp = portfolios?.map(function (portfolio) {\r\n        return portfolio.name;\r\n      });\r\n      tmp && setPortfolioOptions(tmp);\r\n    });\r\n  }, []);\r\n\r\n  const { isLoading, data } = useQuery({\r\n    queryKey: [\"getDynamics\", currentPortfolio],\r\n    queryFn: () =>\r\n      fetch(\r\n        BASE_URL + \"portfolio/dynamics?currentPortfolio=\" + currentPortfolio\r\n      ).then((res) => res.json()),\r\n    enabled: !!currentPortfolio,\r\n  });\r\n\r\n  const { data: portfolio } = useQuery({\r\n    queryKey: [\"listPositions\", currentPortfolio],\r\n    queryFn: () =>\r\n      fetch(\r\n        BASE_URL + \"portfolio/portfolio?currentPortfolio=\" + currentPortfolio\r\n      ).then((res) => res.json()),\r\n    enabled: !!currentPortfolio,\r\n  });\r\n\r\n  React.useMemo(() => {\r\n    dispatch &&\r\n      dispatch({ type: \"selectPortfolio\", payload: currentPortfolio });\r\n  }, [currentPortfolio]);\r\n\r\n  if (isLoading && !!currentPortfolio) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={2} sx={{ p: 2 }}>\r\n      <Grid item xs={12}>\r\n        <SingleSelect\r\n          placeholder=\"选择投资组合\"\r\n          options={portfolioOptions}\r\n          setValue={setCurrentPortfolio}\r\n          value={state?.currentPortfolio}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        当前现金:{data && data.cash}\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        当前证券市值:{data && data.securityMarketValue}\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        总市值:{data && data.totalMarketValue}\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        收益率:{data && data.profitMargin}\r\n      </Grid>\r\n      <Grid item xs={12} sx={{ height: 500 }}>\r\n        <DataGrid\r\n          columns={columns}\r\n          rows={portfolio && !!portfolio.positions ? portfolio.positions : []}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import { LoadingButton } from \"@mui/lab\";\r\nimport { Button } from \"@mui/material\";\r\nimport SaveIcon from \"@mui/icons-material/Save\";\r\n\r\ntype Props = {\r\n  buttonStatus: string;\r\n  submit: () => void;\r\n};\r\n\r\nexport type ButtonStatus = \"SUCCEED\" | \"ERROR\" | \"LOADING\" | \"READY\" | \"\";\r\n\r\nexport default function StatusButton(props: Props) {\r\n  const { buttonStatus, submit } = props;\r\n  switch (buttonStatus) {\r\n    case \"SUCCEED\":\r\n      return (\r\n        <Button variant=\"contained\" color=\"success\">\r\n          成功\r\n        </Button>\r\n      );\r\n    case \"ERROR\":\r\n      return (\r\n        <Button variant=\"outlined\" color=\"error\">\r\n          错误\r\n        </Button>\r\n      );\r\n    case \"LOADING\":\r\n      return (\r\n        <LoadingButton\r\n          loading\r\n          loadingPosition=\"start\"\r\n          startIcon={<SaveIcon />}\r\n          variant=\"outlined\"\r\n        >\r\n          处理中\r\n        </LoadingButton>\r\n      );\r\n    case \"READY\":\r\n      return (\r\n        <Button variant=\"contained\" color=\"primary\" onClick={submit}>\r\n          试算\r\n        </Button>\r\n      );\r\n\r\n    default:\r\n      return (\r\n        <Button variant=\"contained\" color=\"primary\" disabled>\r\n          试算\r\n        </Button>\r\n      );\r\n  }\r\n}\r\n","import {\r\n  Button,\r\n  Dialog,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Grid,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { DataGrid, GridColDef } from \"@mui/x-data-grid\";\r\nimport { OrderPlacementContext } from \"../context/OrderPlacementContext\";\r\nimport React from \"react\";\r\nimport { useMutation } from \"@tanstack/react-query\";\r\nimport { BASE_URL } from \"../constant/Constant\";\r\nimport { DateTimePicker, LocalizationProvider } from \"@mui/x-date-pickers\";\r\nimport { Dayjs } from \"dayjs\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\n\r\ntype Props = {\r\n  open: boolean;\r\n  data: any[];\r\n  handleClose: () => void;\r\n};\r\n\r\nconst columns: GridColDef[] = [\r\n  { field: \"buyOrSell\", headerName: \"方向\", width: 80 },\r\n  { field: \"securityCode\", headerName: \"证券代码\", width: 120 },\r\n  { field: \"securityName\", headerName: \"证券名称\", width: 100 },\r\n  { field: \"share\", headerName: \"预估份数\", width: 100, type: \"number\" },\r\n  { field: \"value\", headerName: \"预估市值\", width: 100, type: \"number\" },\r\n];\r\n\r\nexport default function PreorderDialog(props: Props) {\r\n  const { open, data, handleClose } = props;\r\n\r\n  const { state } = React.useContext(OrderPlacementContext);\r\n\r\n  const [startTime, setStartTime] = React.useState<Dayjs | null>(null);\r\n\r\n  const [endTime, setEndTime] = React.useState<Dayjs | null>(null);\r\n\r\n  const mutation = useMutation({\r\n    mutationFn: () => {\r\n      return fetch(BASE_URL + \"position/order\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          orders: data,\r\n          portfolio: state?.currentPortfolio,\r\n          startTime: startTime,\r\n          endTime: endTime,\r\n        }),\r\n      }).then((res) => res.json());\r\n    },\r\n  });\r\n\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n      <Dialog open={open} onClose={handleClose}>\r\n        <DialogTitle>\r\n          <Stack direction={\"row\"} spacing={2}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={2}>\r\n                <Typography>试算</Typography>\r\n              </Grid>\r\n              <Grid item xs={5}>\r\n                <DateTimePicker\r\n                  label=\"开始时间\"\r\n                  value={startTime}\r\n                  onChange={(newValue) => setStartTime(newValue)}\r\n                  disablePast\r\n                />\r\n              </Grid>\r\n              <Grid item xs={5}>\r\n                <DateTimePicker\r\n                  label=\"结束时间\"\r\n                  value={endTime}\r\n                  onChange={(newValue) => setEndTime(newValue)}\r\n                  disablePast\r\n                />\r\n              </Grid>\r\n              <Grid item xs={3}>\r\n                <Button\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  onClick={() => {\r\n                    mutation.mutate();\r\n                  }}\r\n                >\r\n                  提交\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Stack>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DataGrid columns={columns} rows={data} />\r\n        </DialogContent>\r\n      </Dialog>\r\n    </LocalizationProvider>\r\n  );\r\n}\r\n","import { Grid, Paper, Typography } from \"@mui/material\";\r\nimport { DataGrid, GridColDef, GridRowsProp } from \"@mui/x-data-grid\";\r\nimport React, { ReactNode } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport * as XLSX from \"xlsx\";\r\nimport StatusButton, { ButtonStatus } from \"./StatusButton\";\r\nimport { useMutation } from \"@tanstack/react-query\";\r\nimport { BASE_URL } from \"../constant/Constant\";\r\nimport { OrderPlacementContext } from \"../context/OrderPlacementContext\";\r\nimport PreorderDialog from \"./PreorderDialog\";\r\n\r\nasync function handleFileInputChange(file: File) {\r\n  const data = await file.arrayBuffer();\r\n  const workbook = XLSX.read(data);\r\n  const firstSheetName = workbook.SheetNames[0];\r\n  if (!!firstSheetName) {\r\n    const worksheet = workbook.Sheets[firstSheetName];\r\n    if (!!worksheet) {\r\n      const sheetData: any[] = XLSX.utils.sheet_to_json(worksheet);\r\n      for (let i = 0; i < sheetData.length; i++) {\r\n        sheetData[i].id = i + 1;\r\n      }\r\n      return sheetData;\r\n    }\r\n  }\r\n  return [];\r\n}\r\n\r\nconst columns: GridColDef[] = [\r\n  { field: \"code\", headerName: \"证券代码\", width: 200 },\r\n  { field: \"name\", headerName: \"证券名称\", width: 200 },\r\n];\r\n\r\nexport default function UploadOrderSection() {\r\n  const { acceptedFiles, getRootProps, getInputProps } = useDropzone();\r\n\r\n  const { state } = React.useContext(OrderPlacementContext);\r\n\r\n  const [orders, setOrders] = React.useState([]);\r\n\r\n  const files = React.useMemo(() => {\r\n    const ans: ReactNode[] = [];\r\n    acceptedFiles.forEach((file) => {\r\n      ans.push(\r\n        <li key={file.name}>\r\n          {file.name} - {file.size} bytes\r\n        </li>\r\n      );\r\n    });\r\n    return ans;\r\n  }, [acceptedFiles]);\r\n\r\n  const [data, setData] = React.useState<GridRowsProp>([]);\r\n\r\n  React.useEffect(() => {\r\n    if (!!acceptedFiles[0]) {\r\n      setData([]);\r\n      const data = handleFileInputChange(acceptedFiles[0]);\r\n      data.then((record) => {\r\n        console.log(record);\r\n        setData(record);\r\n      });\r\n    }\r\n  }, [acceptedFiles[0]]);\r\n\r\n  const [buttonStatus, setButtonStatus] = React.useState<ButtonStatus>(\"\");\r\n\r\n  const mutation = useMutation({\r\n    mutationFn: () => {\r\n      return fetch(BASE_URL + \"position\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          positions: data,\r\n          portfolio: state?.currentPortfolio,\r\n        }),\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          for (let i = 0; i < data.length; i++) {\r\n            data[i].id = i + 1;\r\n          }\r\n          setOrders(data);\r\n        });\r\n    },\r\n  });\r\n\r\n  const handleClose = () => {\r\n    setOrders([]);\r\n  };\r\n\r\n  React.useMemo(() => {\r\n    if (data.length > 0) {\r\n      setButtonStatus(\"READY\");\r\n    }\r\n  }, [data]);\r\n\r\n  return (\r\n    <Grid container spacing={2} sx={{ p: 2 }}>\r\n      <Grid item xs={4}>\r\n        <div {...getRootProps({ className: \"dropzone\" })}>\r\n          <Paper>\r\n            <input {...getInputProps()} />\r\n            <Typography align=\"center\">点击此处上传</Typography>\r\n          </Paper>\r\n        </div>\r\n      </Grid>\r\n      <Grid item xs={4}>\r\n        <aside>\r\n          <ul>{files}</ul>\r\n        </aside>\r\n      </Grid>\r\n      <Grid item xs={4}>\r\n        <StatusButton\r\n          buttonStatus={buttonStatus}\r\n          submit={() => {\r\n            mutation.mutate();\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} sx={{ height: 800 }}>\r\n        <DataGrid columns={columns} rows={data} />\r\n      </Grid>\r\n      <PreorderDialog\r\n        open={orders.length > 0}\r\n        data={orders}\r\n        handleClose={handleClose}\r\n      />\r\n    </Grid>\r\n  );\r\n}\r\n","import { Grid, Stack, Typography, styled } from \"@mui/material\";\r\nimport {\r\n  DataGrid,\r\n  GridColDef,\r\n  GridRenderCellParams,\r\n  GridSlotsComponentsProps,\r\n} from \"@mui/x-data-grid\";\r\nimport FiberManualRecordIcon from \"@mui/icons-material/FiberManualRecord\";\r\nimport React from \"react\";\r\n\r\nconst Progress = styled(\"progress\")(() => `background: blue,`);\r\n\r\nconst columns: GridColDef[] = [\r\n  { field: \"buyOrSell\", headerName: \"方向\", width: 80 },\r\n  { field: \"securityCode\", headerName: \"证券代码\", width: 120 },\r\n  { field: \"securityName\", headerName: \"证券名称\", width: 100 },\r\n  {\r\n    field: \"ratio\",\r\n    headerName: \"完成率\",\r\n    width: 220,\r\n    type: \"number\",\r\n    renderCell: (params: GridRenderCellParams<any>) => (\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={10}>\r\n          <Progress value={String(params.value)} max=\"100\" />\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <Typography>{params.value + \"%\"}</Typography>\r\n          {/* <span>{params.value + \"%\"}</span> */}\r\n        </Grid>\r\n      </Grid>\r\n    ),\r\n  },\r\n];\r\n\r\ntype Status = \"connected\" | \"disconnected\";\r\n\r\ntype Props = {\r\n  orders: any[];\r\n};\r\n\r\ndeclare module \"@mui/x-data-grid\" {\r\n  interface FooterPropsOverrides {\r\n    status: Status;\r\n  }\r\n}\r\n\r\nexport function CustomStatusComponent(\r\n  props: NonNullable<GridSlotsComponentsProps[\"footer\"]>\r\n) {\r\n  return (\r\n    <Stack direction={\"row\"} sx={{ p: 1 }} spacing={1}>\r\n      <FiberManualRecordIcon\r\n        sx={{ color: props.status === \"connected\" ? \"#4caf50\" : \"#d9182e\" }}\r\n      />\r\n      <Typography>{props.status}</Typography>\r\n    </Stack>\r\n  );\r\n}\r\n\r\nexport default function OrderProcessingSection(props: Props) {\r\n  const { orders } = props;\r\n  const [status, setStatus] = React.useState<Status>(\"connected\");\r\n  return (\r\n    <Grid container spacing={2} sx={{ p: 2 }}>\r\n      <Grid item xs={12}>\r\n        <DataGrid\r\n          columns={columns}\r\n          rows={orders ? orders : []}\r\n          sx={{ maxHeight: 600 }}\r\n          slots={{\r\n            footer: CustomStatusComponent,\r\n          }}\r\n          slotProps={{\r\n            footer: { status },\r\n          }}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import { Grid } from \"@mui/material\";\r\nimport HoldingsSection from \"../component/HoldingsSection\";\r\nimport UploadOrderSection from \"../component/UploadOrderSection\";\r\nimport {\r\n  OrderPlacementContext,\r\n  orderPlacementReducer,\r\n} from \"../context/OrderPlacementContext\";\r\nimport { useReducer } from \"react\";\r\nimport { BASE_URL } from \"../constant/Constant\";\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport OrderProcessingSection from \"../component/OrderProcessingSection\";\r\n\r\nconst initialState = {\r\n  currentPortfolio: null,\r\n};\r\n\r\nexport default function OrderPlacementPage() {\r\n  const [state, dispatch] = useReducer(orderPlacementReducer, initialState);\r\n\r\n  const { isLoading, data } = useQuery({\r\n    queryKey: [\"listOrders\", state.currentPortfolio],\r\n    // queryKey: [\"listOrders\"],\r\n    queryFn: () =>\r\n      fetch(\r\n        BASE_URL + \"position/order?currentPortfolio=\" + state.currentPortfolio\r\n      )\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          for (let i = 0; i < data.length; i++) {\r\n            data[i].id = i + 1;\r\n          }\r\n          return data;\r\n        }),\r\n    // enabled: !!state.currentPortfolio,\r\n    refetchInterval: 30000,\r\n  });\r\n\r\n  return (\r\n    <OrderPlacementContext.Provider value={{ state, dispatch }}>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={6}>\r\n          <HoldingsSection />\r\n        </Grid>\r\n        {data && data.length === 0 && (\r\n          <Grid item xs={6}>\r\n            <UploadOrderSection />\r\n          </Grid>\r\n        )}\r\n        {data && data.length > 0 && (\r\n          <Grid item xs={6}>\r\n            <OrderProcessingSection orders={data} />\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </OrderPlacementContext.Provider>\r\n  );\r\n}\r\n"],"names":["OrderPlacementContext","createContext","orderPlacementReducer","state","action","type","_objectSpread","currentPortfolio","payload","Error","columns","field","headerName","width","HoldingsSection","_React$useContext","React","dispatch","_React$useState","_React$useState2","_slicedToArray","portfolioOptions","setPortfolioOptions","_React$useState3","_React$useState4","setCurrentPortfolio","listPortfolios","then","portfolios","tmp","map","portfolio","name","_useQuery","useQuery","queryKey","queryFn","fetch","BASE_URL","res","json","enabled","isLoading","data","_jsx","children","_jsxs","Grid","container","spacing","sx","p","item","xs","SingleSelect","placeholder","options","setValue","value","cash","securityMarketValue","totalMarketValue","profitMargin","height","DataGrid","rows","positions","StatusButton","props","buttonStatus","submit","Button","variant","color","LoadingButton","loading","loadingPosition","startIcon","SaveIcon","onClick","disabled","PreorderDialog","open","handleClose","startTime","setStartTime","endTime","setEndTime","mutation","useMutation","mutationFn","method","headers","body","JSON","stringify","orders","LocalizationProvider","dateAdapter","AdapterDayjs","Dialog","onClose","DialogTitle","Stack","direction","Typography","DateTimePicker","label","onChange","newValue","disablePast","fullWidth","mutate","DialogContent","_handleFileInputChange","_asyncToGenerator","_regeneratorRuntime","mark","_callee","file","workbook","firstSheetName","worksheet","sheetData","i","wrap","_context","prev","next","arrayBuffer","sent","XLSX","SheetNames","Sheets","sheet_to_json","length","id","abrupt","stop","apply","arguments","UploadOrderSection","_useDropzone","useDropzone","acceptedFiles","getRootProps","getInputProps","setOrders","files","ans","forEach","push","size","setData","_x","handleFileInputChange","record","console","log","_React$useState5","_React$useState6","setButtonStatus","className","Paper","align","Progress","styled","renderCell","params","String","max","CustomStatusComponent","FiberManualRecordIcon","status","OrderProcessingSection","maxHeight","slots","footer","slotProps","initialState","OrderPlacementPage","_useReducer","useReducer","_useReducer2","refetchInterval","Provider"],"sourceRoot":""}