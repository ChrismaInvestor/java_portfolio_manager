{"version":3,"file":"static/js/613.9c0bb394.chunk.js","mappings":"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","sources":["context/OrderPlacementContext.ts","component/HoldingsSection.tsx","component/StatusButton.tsx","component/UploadOrderSection.tsx","component/OrderProcessingSection.tsx","pages/OrderPlacementPage.tsx"],"sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport type Action = {\r\n  type: string;\r\n  payload?: any;\r\n};\r\n\r\nexport type Context = {\r\n  state?: any;\r\n  dispatch?: React.Dispatch<Action>;\r\n};\r\n\r\ntype State = {\r\n  currentPortfolio: string;\r\n};\r\n\r\nexport const OrderPlacementContext = createContext<Context>({});\r\n\r\nexport function orderPlacementReducer(state: State, action: Action) {\r\n  switch (action.type) {\r\n    case \"selectPortfolio\":\r\n      return { ...state, currentPortfolio: action.payload };\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n","import { Grid } from \"@mui/material\";\r\nimport { DataGrid, GridColDef } from \"@mui/x-data-grid\";\r\nimport SingleSelect from \"./SingleSelect\";\r\nimport React from \"react\";\r\nimport { listPortfolios } from \"../api/ListPortfolios\";\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport { BASE_URL } from \"../constant/Constant\";\r\nimport { OrderPlacementContext } from \"../context/OrderPlacementContext\";\r\nimport usePortfolioOptions from \"../hook/usePortfolioOptions\";\r\n\r\nconst columns: GridColDef[] = [\r\n  { field: \"securityCode\", headerName: \"证券代码\", width: 100 },\r\n  { field: \"name\", headerName: \"证券名称\", width: 100 },\r\n  { field: \"securityShare\", headerName: \"持股数\", width: 100 },\r\n  { field: \"cost\", headerName: \"成本\", width: 100 },\r\n  { field: \"value\", headerName: \"市值\", width: 100 },\r\n  { field: \"profit\", headerName: \"盈亏\", width: 100 },\r\n];\r\n\r\nexport default function HoldingsSection() {\r\n  const { state, dispatch } = React.useContext(OrderPlacementContext);\r\n\r\n  const [currentPortfolio, setCurrentPortfolio] = React.useState<string>();\r\n\r\n  const [portfolioOptions] = usePortfolioOptions();\r\n\r\n  const { isLoading, data } = useQuery({\r\n    queryKey: [\"getDynamics\", currentPortfolio],\r\n    queryFn: () =>\r\n      fetch(\r\n        BASE_URL + \"portfolio/dynamics?currentPortfolio=\" + currentPortfolio\r\n      ).then((res) => res.json()),\r\n    enabled: !!currentPortfolio,\r\n  });\r\n\r\n  const { data: portfolio } = useQuery({\r\n    queryKey: [\"listPositions\", currentPortfolio],\r\n    queryFn: () =>\r\n      fetch(\r\n        BASE_URL + \"portfolio/portfolio?currentPortfolio=\" + currentPortfolio\r\n      ).then((res) => res.json()),\r\n    enabled: !!currentPortfolio,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    dispatch &&\r\n      dispatch({ type: \"selectPortfolio\", payload: currentPortfolio });\r\n  }, [currentPortfolio]);\r\n\r\n  if (isLoading && !!currentPortfolio) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={2} sx={{ p: 2 }}>\r\n      <Grid item xs={12}>\r\n        <SingleSelect\r\n          placeholder=\"选择投资组合\"\r\n          options={portfolioOptions}\r\n          setValue={setCurrentPortfolio}\r\n          value={state?.currentPortfolio}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        当前现金:{data && data.cash}\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        当前证券市值:{data && data.securityMarketValue}\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        总市值:{data && data.totalMarketValue}\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        收益率:{data && data.profitMargin}\r\n      </Grid>\r\n      <Grid item xs={12} sx={{ height: 500 }}>\r\n        <DataGrid\r\n          columns={columns}\r\n          rows={portfolio && !!portfolio.positions ? portfolio.positions : []}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import { LoadingButton } from \"@mui/lab\";\r\nimport { Button } from \"@mui/material\";\r\nimport SaveIcon from \"@mui/icons-material/Save\";\r\n\r\ntype Props = {\r\n  buttonStatus: string;\r\n  submit: () => void;\r\n};\r\n\r\nexport type ButtonStatus = \"SUCCEED\" | \"ERROR\" | \"LOADING\" | \"READY\" | \"\";\r\n\r\nexport default function StatusButton(props: Props) {\r\n  const { buttonStatus, submit } = props;\r\n  switch (buttonStatus) {\r\n    case \"SUCCEED\":\r\n      return (\r\n        <Button variant=\"contained\" color=\"success\">\r\n          成功\r\n        </Button>\r\n      );\r\n    case \"ERROR\":\r\n      return (\r\n        <Button variant=\"outlined\" color=\"error\">\r\n          错误\r\n        </Button>\r\n      );\r\n    case \"LOADING\":\r\n      return (\r\n        <LoadingButton\r\n          loading\r\n          loadingPosition=\"start\"\r\n          startIcon={<SaveIcon />}\r\n          variant=\"outlined\"\r\n        >\r\n          处理中\r\n        </LoadingButton>\r\n      );\r\n    case \"READY\":\r\n      return (\r\n        <Button variant=\"contained\" color=\"primary\" onClick={submit}>\r\n          试算\r\n        </Button>\r\n      );\r\n\r\n    default:\r\n      return (\r\n        <Button variant=\"contained\" color=\"primary\" disabled>\r\n          试算\r\n        </Button>\r\n      );\r\n  }\r\n}\r\n","import { Grid, Paper, Typography } from \"@mui/material\";\r\nimport { DataGrid, GridColDef, GridRowsProp } from \"@mui/x-data-grid\";\r\nimport React, { ReactNode } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport * as XLSX from \"xlsx\";\r\nimport StatusButton, { ButtonStatus } from \"./StatusButton\";\r\nimport { useMutation } from \"@tanstack/react-query\";\r\nimport { BASE_URL } from \"../constant/Constant\";\r\nimport { OrderPlacementContext } from \"../context/OrderPlacementContext\";\r\nimport PreorderDialog from \"./PreorderDialog\";\r\nimport { Order } from \"../type/Order\";\r\n\r\nasync function handleFileInputChange(file: File) {\r\n  const data = await file.arrayBuffer();\r\n  const workbook = XLSX.read(data);\r\n  const firstSheetName = workbook.SheetNames[0];\r\n  if (!!firstSheetName) {\r\n    const worksheet = workbook.Sheets[firstSheetName];\r\n    if (!!worksheet) {\r\n      const sheetData: any[] = XLSX.utils.sheet_to_json(worksheet);\r\n      for (let i = 0; i < sheetData.length; i++) {\r\n        sheetData[i].id = i + 1;\r\n      }\r\n      return sheetData;\r\n    }\r\n  }\r\n  return [];\r\n}\r\n\r\nconst columns: GridColDef[] = [\r\n  { field: \"code\", headerName: \"证券代码\", width: 200 },\r\n  { field: \"name\", headerName: \"证券名称\", width: 200 },\r\n];\r\n\r\nexport default function UploadOrderSection() {\r\n  const { acceptedFiles, getRootProps, getInputProps } = useDropzone();\r\n\r\n  const { state } = React.useContext(OrderPlacementContext);\r\n\r\n  const [orders, setOrders] = React.useState<Order[]>([]);\r\n\r\n  const files = React.useMemo(() => {\r\n    const ans: ReactNode[] = [];\r\n    acceptedFiles.forEach((file) => {\r\n      ans.push(\r\n        <li key={file.name}>\r\n          {file.name} - {file.size} bytes\r\n        </li>\r\n      );\r\n    });\r\n    return ans;\r\n  }, [acceptedFiles]);\r\n\r\n  const [data, setData] = React.useState<GridRowsProp>([]);\r\n\r\n  React.useEffect(() => {\r\n    if (!!acceptedFiles[0]) {\r\n      setData([]);\r\n      const data = handleFileInputChange(acceptedFiles[0]);\r\n      data.then((record) => {\r\n        console.log(record);\r\n        setData(record);\r\n      });\r\n    }\r\n  }, [acceptedFiles[0]]);\r\n\r\n  const [buttonStatus, setButtonStatus] = React.useState<ButtonStatus>(\"\");\r\n\r\n  const mutation = useMutation({\r\n    mutationFn: () => {\r\n      return fetch(BASE_URL + \"position\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          positions: data,\r\n          portfolio: state?.currentPortfolio,\r\n        }),\r\n      });\r\n    },\r\n    onSuccess: async (data) => {\r\n      const orders: Order[] = await data.json();\r\n      for (let i = 0; i < orders.length; i++) {\r\n        orders[i].id = i + 1;\r\n      }\r\n      setOrders(orders);\r\n    },\r\n  });\r\n\r\n  const handleDialogClose = () => {\r\n    setOrders([]);\r\n  };\r\n\r\n  React.useMemo(() => {\r\n    if (data.length > 0) {\r\n      setButtonStatus(\"READY\");\r\n    }\r\n  }, [data]);\r\n\r\n  return (\r\n    <Grid container spacing={2} sx={{ p: 2 }}>\r\n      <Grid item xs={4}>\r\n        <div {...getRootProps({ className: \"dropzone\" })}>\r\n          <Paper>\r\n            <input {...getInputProps()} />\r\n            <Typography align=\"center\">点击此处上传</Typography>\r\n          </Paper>\r\n        </div>\r\n      </Grid>\r\n      <Grid item xs={4}>\r\n        <aside>\r\n          <ul>{files}</ul>\r\n        </aside>\r\n      </Grid>\r\n      <Grid item xs={4}>\r\n        <StatusButton\r\n          buttonStatus={buttonStatus}\r\n          submit={() => {\r\n            mutation.mutate();\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} sx={{ height: 800 }}>\r\n        <DataGrid columns={columns} rows={data} />\r\n      </Grid>\r\n      <PreorderDialog\r\n        open={orders.length > 0}\r\n        orders={orders}\r\n        handleClose={handleDialogClose}\r\n        portfolioName={state.currentPortfolio}\r\n      />\r\n    </Grid>\r\n  );\r\n}\r\n","import { Grid, Stack, Typography, styled } from \"@mui/material\";\r\nimport {\r\n  DataGrid,\r\n  GridColDef,\r\n  GridRenderCellParams,\r\n  GridSlotsComponentsProps,\r\n} from \"@mui/x-data-grid\";\r\nimport FiberManualRecordIcon from \"@mui/icons-material/FiberManualRecord\";\r\nimport React from \"react\";\r\n\r\nconst Progress = styled(\"progress\")(() => `background: blue,`);\r\n\r\nconst columns: GridColDef[] = [\r\n  { field: \"buyOrSell\", headerName: \"方向\", width: 80 },\r\n  { field: \"securityCode\", headerName: \"证券代码\", width: 120 },\r\n  { field: \"securityName\", headerName: \"证券名称\", width: 100 },\r\n  {\r\n    field: \"ratio\",\r\n    headerName: \"完成率\",\r\n    width: 220,\r\n    type: \"number\",\r\n    renderCell: (params: GridRenderCellParams<any>) => (\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={10}>\r\n          <Progress value={String(params.value)} max=\"100\" />\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <Typography>{params.value + \"%\"}</Typography>\r\n          {/* <span>{params.value + \"%\"}</span> */}\r\n        </Grid>\r\n      </Grid>\r\n    ),\r\n  },\r\n];\r\n\r\ntype Status = \"connected\" | \"disconnected\";\r\n\r\ntype Props = {\r\n  orders: any[];\r\n};\r\n\r\ndeclare module \"@mui/x-data-grid\" {\r\n  interface FooterPropsOverrides {\r\n    status: Status;\r\n  }\r\n}\r\n\r\nexport function CustomStatusComponent(\r\n  props: NonNullable<GridSlotsComponentsProps[\"footer\"]>\r\n) {\r\n  return (\r\n    <Stack direction={\"row\"} sx={{ p: 1 }} spacing={1}>\r\n      <FiberManualRecordIcon\r\n        sx={{ color: props.status === \"connected\" ? \"#4caf50\" : \"#d9182e\" }}\r\n      />\r\n      <Typography>{props.status}</Typography>\r\n    </Stack>\r\n  );\r\n}\r\n\r\nexport default function OrderProcessingSection(props: Props) {\r\n  const { orders } = props;\r\n  const [status, setStatus] = React.useState<Status>(\"connected\");\r\n  return (\r\n    <Grid container spacing={2} sx={{ p: 2 }}>\r\n      <Grid item xs={12}>\r\n        <DataGrid\r\n          columns={columns}\r\n          rows={orders ? orders : []}\r\n          sx={{ maxHeight: 600 }}\r\n          slots={{\r\n            footer: CustomStatusComponent,\r\n          }}\r\n          slotProps={{\r\n            footer: { status },\r\n          }}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import { Grid } from \"@mui/material\";\r\nimport HoldingsSection from \"../component/HoldingsSection\";\r\nimport UploadOrderSection from \"../component/UploadOrderSection\";\r\nimport {\r\n  OrderPlacementContext,\r\n  orderPlacementReducer,\r\n} from \"../context/OrderPlacementContext\";\r\nimport { useReducer } from \"react\";\r\nimport { BASE_URL } from \"../constant/Constant\";\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport OrderProcessingSection from \"../component/OrderProcessingSection\";\r\n\r\nconst initialState = {\r\n  currentPortfolio: null,\r\n};\r\n\r\nexport default function OrderPlacementPage() {\r\n  const [state, dispatch] = useReducer(orderPlacementReducer, initialState);\r\n\r\n  const {\r\n    isLoading,\r\n    isError,\r\n    data: ordersInProgress,\r\n  } = useQuery({\r\n    queryKey: [\"listOrders\", state.currentPortfolio],\r\n    queryFn: () =>\r\n      fetch(\r\n        BASE_URL + \"position/order?currentPortfolio=\" + state.currentPortfolio\r\n      )\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          for (let i = 0; i < data.length; i++) {\r\n            data[i].id = i + 1;\r\n          }\r\n          return data;\r\n        }),\r\n    // enabled: !!state.currentPortfolio,\r\n    refetchInterval: 30000,\r\n  });\r\n\r\n  if (isLoading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (isError) {\r\n    return <div>There is error in querying data</div>;\r\n  }\r\n\r\n  return (\r\n    <OrderPlacementContext.Provider value={{ state, dispatch }}>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={6}>\r\n          <HoldingsSection />\r\n        </Grid>\r\n        {ordersInProgress.length === 0 && (\r\n          <Grid item xs={6}>\r\n            <UploadOrderSection />\r\n          </Grid>\r\n        )}\r\n        {ordersInProgress.length > 0 && (\r\n          <Grid item xs={6}>\r\n            <OrderProcessingSection orders={ordersInProgress} />\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </OrderPlacementContext.Provider>\r\n  );\r\n}\r\n"],"names":["OrderPlacementContext","createContext","orderPlacementReducer","state","action","type","_objectSpread","currentPortfolio","payload","Error","columns","field","headerName","width","HoldingsSection","_React$useContext","React","dispatch","_React$useState","_React$useState2","_slicedToArray","setCurrentPortfolio","_usePortfolioOptions","usePortfolioOptions","portfolioOptions","_useQuery","useQuery","queryKey","queryFn","fetch","BASE_URL","then","res","json","enabled","isLoading","data","portfolio","_jsx","children","_jsxs","Grid","container","spacing","sx","p","item","xs","SingleSelect","placeholder","options","setValue","value","cash","securityMarketValue","totalMarketValue","profitMargin","height","DataGrid","rows","positions","StatusButton","props","buttonStatus","submit","Button","variant","color","LoadingButton","loading","loadingPosition","startIcon","SaveIcon","onClick","disabled","_handleFileInputChange","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","file","workbook","firstSheetName","worksheet","sheetData","i","wrap","_context2","prev","next","arrayBuffer","sent","XLSX","SheetNames","Sheets","sheet_to_json","length","id","abrupt","stop","apply","arguments","UploadOrderSection","_useDropzone","useDropzone","acceptedFiles","getRootProps","getInputProps","orders","setOrders","files","ans","forEach","push","name","size","_React$useState3","_React$useState4","setData","_x","handleFileInputChange","record","console","log","_React$useState5","_React$useState6","setButtonStatus","mutation","useMutation","mutationFn","method","headers","body","JSON","stringify","onSuccess","_onSuccess","_callee","_context","_x2","className","Paper","Typography","align","mutate","PreorderDialog","open","handleClose","portfolioName","Progress","styled","renderCell","params","String","max","CustomStatusComponent","Stack","direction","FiberManualRecordIcon","status","OrderProcessingSection","maxHeight","slots","footer","slotProps","initialState","OrderPlacementPage","_useReducer","useReducer","_useReducer2","refetchInterval","isError","ordersInProgress","Provider"],"sourceRoot":""}